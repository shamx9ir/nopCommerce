// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Nop.Data;

namespace Nop.Data.Migrations
{
    [DbContext(typeof(NopObjectContext))]
    [Migration("20200107223321_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Nop.Core.Domain.Affiliates.Affiliate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("AddressId");

                    b.Property<string>("AdminComment");

                    b.Property<bool>("Deleted");

                    b.Property<string>("FriendlyUrlName");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Affiliate");
                });

            modelBuilder.Entity("Nop.Core.Domain.Blogs.BlogComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BlogPostId");

                    b.Property<string>("CommentText");

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<int>("CustomerId");

                    b.Property<bool>("IsApproved");

                    b.Property<int>("StoreId");

                    b.HasKey("Id");

                    b.HasIndex("BlogPostId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StoreId");

                    b.ToTable("BlogComment");
                });

            modelBuilder.Entity("Nop.Core.Domain.Blogs.BlogPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowComments");

                    b.Property<string>("Body")
                        .IsRequired();

                    b.Property<string>("BodyOverview");

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<DateTime?>("EndDateUtc");

                    b.Property<bool>("IncludeInSitemap");

                    b.Property<int>("LanguageId");

                    b.Property<bool>("LimitedToStores");

                    b.Property<string>("MetaDescription");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(400);

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(400);

                    b.Property<DateTime?>("StartDateUtc");

                    b.Property<string>("Tags");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("BlogPost");
                });

            modelBuilder.Entity("Nop.Core.Domain.Catalog.BackInStockSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<int>("CustomerId");

                    b.Property<int>("ProductId");

                    b.Property<int>("StoreId");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("BackInStockSubscription");
                });

            modelBuilder.Entity("Nop.Core.Domain.Catalog.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowCustomersToSelectPageSize");

                    b.Property<int>("CategoryTemplateId");

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IncludeInTopMenu");

                    b.Property<bool>("LimitedToStores");

                    b.Property<string>("MetaDescription");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(400);

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(400);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<int>("PageSize");

                    b.Property<string>("PageSizeOptions")
                        .HasMaxLength(200);

                    b.Property<int>("ParentCategoryId");

                    b.Property<int>("PictureId");

                    b.Property<string>("PriceRanges")
                        .HasMaxLength(400);

                    b.Property<bool>("Published");

                    b.Property<bool>("ShowOnHomepage");

                    b.Property<bool>("SubjectToAcl");

                    b.Property<DateTime>("UpdatedOnUtc");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Nop.Core.Domain.Catalog.CategoryTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<string>("ViewPath")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.HasKey("Id");

                    b.ToTable("CategoryTemplate");
                });

            modelBuilder.Entity("Nop.Core.Domain.Catalog.CrossSellProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId1");

                    b.Property<int>("ProductId2");

                    b.HasKey("Id");

                    b.ToTable("CrossSellProduct");
                });

            modelBuilder.Entity("Nop.Core.Domain.Catalog.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowCustomersToSelectPageSize");

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("LimitedToStores");

                    b.Property<int>("ManufacturerTemplateId");

                    b.Property<string>("MetaDescription");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(400);

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(400);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<int>("PageSize");

                    b.Property<string>("PageSizeOptions")
                        .HasMaxLength(200);

                    b.Property<int>("PictureId");

                    b.Property<string>("PriceRanges")
                        .HasMaxLength(400);

                    b.Property<bool>("Published");

                    b.Property<bool>("SubjectToAcl");

                    b.Property<DateTime>("UpdatedOnUtc");

                    b.HasKey("Id");

                    b.ToTable("Manufacturer");
                });

            modelBuilder.Entity("Nop.Core.Domain.Catalog.ManufacturerTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<string>("ViewPath")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.HasKey("Id");

                    b.ToTable("ManufacturerTemplate");
                });

            modelBuilder.Entity("Nop.Core.Domain.Catalog.PredefinedProductAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IsPreSelected");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<decimal>("PriceAdjustment")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<bool>("PriceAdjustmentUsePercentage");

                    b.Property<int>("ProductAttributeId");

                    b.Property<decimal>("WeightAdjustment")
                        .HasColumnType("decimal(18, 4)");

                    b.HasKey("Id");

                    b.HasIndex("ProductAttributeId");

                    b.ToTable("PredefinedProductAttributeValue");
                });

            modelBuilder.Entity("Nop.Core.Domain.Catalog.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AdditionalShippingCharge")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("AdminComment");

                    b.Property<bool>("AllowAddingOnlyExistingAttributeCombinations");

                    b.Property<bool>("AllowBackInStockSubscriptions");

                    b.Property<bool>("AllowCustomerReviews");

                    b.Property<string>("AllowedQuantities")
                        .HasMaxLength(1000);

                    b.Property<int>("ApprovedRatingSum");

                    b.Property<int>("ApprovedTotalReviews");

                    b.Property<bool>("AutomaticallyAddRequiredProducts");

                    b.Property<DateTime?>("AvailableEndDateTimeUtc");

                    b.Property<bool>("AvailableForPreOrder");

                    b.Property<DateTime?>("AvailableStartDateTimeUtc");

                    b.Property<int>("BackorderModeId");

                    b.Property<decimal>("BasepriceAmount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("BasepriceBaseAmount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("BasepriceBaseUnitId");

                    b.Property<bool>("BasepriceEnabled");

                    b.Property<int>("BasepriceUnitId");

                    b.Property<bool>("CallForPrice");

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<bool>("CustomerEntersPrice");

                    b.Property<bool>("Deleted");

                    b.Property<int>("DeliveryDateId");

                    b.Property<bool>("DisableBuyButton");

                    b.Property<bool>("DisableWishlistButton");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("DisplayStockAvailability");

                    b.Property<bool>("DisplayStockQuantity");

                    b.Property<int>("DownloadActivationTypeId");

                    b.Property<int?>("DownloadExpirationDays");

                    b.Property<int>("DownloadId");

                    b.Property<string>("FullDescription");

                    b.Property<int>("GiftCardTypeId");

                    b.Property<string>("Gtin")
                        .HasMaxLength(400);

                    b.Property<bool>("HasDiscountsApplied");

                    b.Property<bool>("HasSampleDownload");

                    b.Property<bool>("HasTierPrices");

                    b.Property<bool>("HasUserAgreement");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<bool>("IsDownload");

                    b.Property<bool>("IsFreeShipping");

                    b.Property<bool>("IsGiftCard");

                    b.Property<bool>("IsRecurring");

                    b.Property<bool>("IsRental");

                    b.Property<bool>("IsShipEnabled");

                    b.Property<bool>("IsTaxExempt");

                    b.Property<bool>("IsTelecommunicationsOrBroadcastingOrElectronicServices");

                    b.Property<decimal>("Length")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<bool>("LimitedToStores");

                    b.Property<int>("LowStockActivityId");

                    b.Property<int>("ManageInventoryMethodId");

                    b.Property<string>("ManufacturerPartNumber")
                        .HasMaxLength(400);

                    b.Property<bool>("MarkAsNew");

                    b.Property<DateTime?>("MarkAsNewEndDateTimeUtc");

                    b.Property<DateTime?>("MarkAsNewStartDateTimeUtc");

                    b.Property<int>("MaxNumberOfDownloads");

                    b.Property<decimal>("MaximumCustomerEnteredPrice")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("MetaDescription");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(400);

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(400);

                    b.Property<int>("MinStockQuantity");

                    b.Property<decimal>("MinimumCustomerEnteredPrice")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<int>("NotApprovedRatingSum");

                    b.Property<int>("NotApprovedTotalReviews");

                    b.Property<bool>("NotReturnable");

                    b.Property<int>("NotifyAdminForQuantityBelow");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("OrderMaximumQuantity");

                    b.Property<int>("OrderMinimumQuantity");

                    b.Property<decimal?>("OverriddenGiftCardAmount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("ParentGroupedProductId");

                    b.Property<DateTime?>("PreOrderAvailabilityStartDateTimeUtc");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("ProductAvailabilityRangeId");

                    b.Property<decimal>("ProductCost")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("ProductTemplateId");

                    b.Property<int>("ProductTypeId");

                    b.Property<bool>("Published");

                    b.Property<int>("RecurringCycleLength");

                    b.Property<int>("RecurringCyclePeriodId");

                    b.Property<int>("RecurringTotalCycles");

                    b.Property<int>("RentalPriceLength");

                    b.Property<int>("RentalPricePeriodId");

                    b.Property<bool>("RequireOtherProducts");

                    b.Property<string>("RequiredProductIds")
                        .HasMaxLength(1000);

                    b.Property<int>("SampleDownloadId");

                    b.Property<bool>("ShipSeparately");

                    b.Property<string>("ShortDescription");

                    b.Property<bool>("ShowOnHomepage");

                    b.Property<string>("Sku")
                        .HasMaxLength(400);

                    b.Property<int>("StockQuantity");

                    b.Property<bool>("SubjectToAcl");

                    b.Property<int>("TaxCategoryId");

                    b.Property<bool>("UnlimitedDownloads");

                    b.Property<DateTime>("UpdatedOnUtc");

                    b.Property<bool>("UseMultipleWarehouses");

                    b.Property<string>("UserAgreementText");

                    b.Property<int>("VendorId");

                    b.Property<bool>("VisibleIndividually");

                    b.Property<int>("WarehouseId");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("Width")
                        .HasColumnType("decimal(18, 4)");

                    b.HasKey("Id");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Nop.Core.Domain.Catalog.ProductAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ProductAttribute");
                });

            modelBuilder.Entity("Nop.Core.Domain.Catalog.ProductAttributeCombination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowOutOfStockOrders");

                    b.Property<string>("AttributesXml");

                    b.Property<string>("Gtin")
                        .HasMaxLength(400);

                    b.Property<string>("ManufacturerPartNumber")
                        .HasMaxLength(400);

                    b.Property<int>("NotifyAdminForQuantityBelow");

                    b.Property<decimal?>("OverriddenPrice")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("PictureId");

                    b.Property<int>("ProductId");

                    b.Property<string>("Sku")
                        .HasMaxLength(400);

                    b.Property<int>("StockQuantity");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttributeCombination");
                });

            modelBuilder.Entity("Nop.Core.Domain.Catalog.ProductAttributeMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttributeControlTypeId");

                    b.Property<string>("ConditionAttributeXml");

                    b.Property<string>("DefaultValue");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IsRequired");

                    b.Property<int>("ProductAttributeId");

                    b.Property<int>("ProductId");

                    b.Property<string>("TextPrompt");

                    b.Property<string>("ValidationFileAllowedExtensions");

                    b.Property<int?>("ValidationFileMaximumSize");

                    b.Property<int?>("ValidationMaxLength");

                    b.Property<int?>("ValidationMinLength");

                    b.HasKey("Id");

                    b.HasIndex("ProductAttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("Product_ProductAttribute_Mapping");
                });

            modelBuilder.Entity("Nop.Core.Domain.Catalog.ProductAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssociatedProductId");

                    b.Property<int>("AttributeValueTypeId");

                    b.Property<string>("ColorSquaresRgb")
                        .HasMaxLength(100);

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<bool>("CustomerEntersQty");

                    b.Property<int>("DisplayOrder");

                    b.Property<int>("ImageSquaresPictureId");

                    b.Property<bool>("IsPreSelected");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<int>("PictureId");

                    b.Property<decimal>("PriceAdjustment")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<bool>("PriceAdjustmentUsePercentage");

                    b.Property<int>("ProductAttributeMappingId");

                    b.Property<int>("Quantity");

                    b.Property<decimal>("WeightAdjustment")
                        .HasColumnType("decimal(18, 4)");

                    b.HasKey("Id");

                    b.HasIndex("ProductAttributeMappingId");

                    b.ToTable("ProductAttributeValue");
                });

            modelBuilder.Entity("Nop.Core.Domain.Catalog.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IsFeaturedProduct");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("Product_Category_Mapping");
                });

            modelBuilder.Entity("Nop.Core.Domain.Catalog.ProductManufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IsFeaturedProduct");

                    b.Property<int>("ManufacturerId");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Product_Manufacturer_Mapping");
                });

            modelBuilder.Entity("Nop.Core.Domain.Catalog.ProductPicture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder");

                    b.Property<int>("PictureId");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("PictureId");

                    b.HasIndex("ProductId");

                    b.ToTable("Product_Picture_Mapping");
                });

            modelBuilder.Entity("Nop.Core.Domain.Catalog.ProductProductTagMapping", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnName("Product_Id");

                    b.Property<int>("ProductTagId")
                        .HasColumnName("ProductTag_Id");

                    b.HasKey("ProductId", "ProductTagId");

                    b.HasIndex("ProductTagId");

                    b.ToTable("Product_ProductTag_Mapping");
                });

            modelBuilder.Entity("Nop.Core.Domain.Catalog.ProductReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<int>("CustomerId");

                    b.Property<bool>("CustomerNotifiedOfReply");

                    b.Property<int>("HelpfulNoTotal");

                    b.Property<int>("HelpfulYesTotal");

                    b.Property<bool>("IsApproved");

                    b.Property<int>("ProductId");

                    b.Property<int>("Rating");

                    b.Property<string>("ReplyText");

                    b.Property<string>("ReviewText");

                    b.Property<int>("StoreId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StoreId");

                    b.ToTable("ProductReview");
                });

            modelBuilder.Entity("Nop.Core.Domain.Catalog.ProductReviewHelpfulness", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId");

                    b.Property<int>("ProductReviewId");

                    b.Property<bool>("WasHelpful");

                    b.HasKey("Id");

                    b.HasIndex("ProductReviewId");

                    b.ToTable("ProductReviewHelpfulness");
                });

            modelBuilder.Entity("Nop.Core.Domain.Catalog.ProductReviewReviewTypeMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductReviewId");

                    b.Property<int>("Rating");

                    b.Property<int>("ReviewTypeId");

                    b.HasKey("Id");

                    b.HasIndex("ProductReviewId");

                    b.HasIndex("ReviewTypeId");

                    b.ToTable("ProductReview_ReviewType_Mapping");
                });

            modelBuilder.Entity("Nop.Core.Domain.Catalog.ProductSpecificationAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowFiltering");

                    b.Property<int>("AttributeTypeId");

                    b.Property<string>("CustomValue")
                        .HasMaxLength(4000);

                    b.Property<int>("DisplayOrder");

                    b.Property<int>("ProductId");

                    b.Property<bool>("ShowOnProductPage");

                    b.Property<int>("SpecificationAttributeOptionId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SpecificationAttributeOptionId");

                    b.ToTable("Product_SpecificationAttribute_Mapping");
                });

            modelBuilder.Entity("Nop.Core.Domain.Catalog.ProductTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.HasKey("Id");

                    b.ToTable("ProductTag");
                });

            modelBuilder.Entity("Nop.Core.Domain.Catalog.ProductTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("IgnoredProductTypes");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<string>("ViewPath")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.HasKey("Id");

                    b.ToTable("ProductTemplate");
                });

            modelBuilder.Entity("Nop.Core.Domain.Catalog.ProductWarehouseInventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId");

                    b.Property<int>("ReservedQuantity");

                    b.Property<int>("StockQuantity");

                    b.Property<int>("WarehouseId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("ProductWarehouseInventory");
                });

            modelBuilder.Entity("Nop.Core.Domain.Catalog.RelatedProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder");

                    b.Property<int>("ProductId1");

                    b.Property<int>("ProductId2");

                    b.HasKey("Id");

                    b.ToTable("RelatedProduct");
                });

            modelBuilder.Entity("Nop.Core.Domain.Catalog.ReviewType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IsRequired");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<bool>("VisibleToAllCustomers");

                    b.HasKey("Id");

                    b.ToTable("ReviewType");
                });

            modelBuilder.Entity("Nop.Core.Domain.Catalog.SpecificationAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("SpecificationAttribute");
                });

            modelBuilder.Entity("Nop.Core.Domain.Catalog.SpecificationAttributeOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColorSquaresRgb")
                        .HasMaxLength(100);

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("SpecificationAttributeId");

                    b.HasKey("Id");

                    b.HasIndex("SpecificationAttributeId");

                    b.ToTable("SpecificationAttributeOption");
                });

            modelBuilder.Entity("Nop.Core.Domain.Catalog.StockQuantityHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CombinationId");

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<string>("Message");

                    b.Property<int>("ProductId");

                    b.Property<int>("QuantityAdjustment");

                    b.Property<int>("StockQuantity");

                    b.Property<int?>("WarehouseId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("StockQuantityHistory");
                });

            modelBuilder.Entity("Nop.Core.Domain.Catalog.TierPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CustomerRoleId");

                    b.Property<DateTime?>("EndDateTimeUtc");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("ProductId");

                    b.Property<int>("Quantity");

                    b.Property<DateTime?>("StartDateTimeUtc");

                    b.Property<int>("StoreId");

                    b.HasKey("Id");

                    b.HasIndex("CustomerRoleId");

                    b.HasIndex("ProductId");

                    b.ToTable("TierPrice");
                });

            modelBuilder.Entity("Nop.Core.Domain.Common.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<string>("City");

                    b.Property<string>("Company");

                    b.Property<int?>("CountryId");

                    b.Property<string>("County");

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<string>("CustomAttributes");

                    b.Property<string>("Email");

                    b.Property<string>("FaxNumber");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("PhoneNumber");

                    b.Property<int?>("StateProvinceId");

                    b.Property<string>("ZipPostalCode");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateProvinceId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Nop.Core.Domain.Common.AddressAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttributeControlTypeId");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IsRequired");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.HasKey("Id");

                    b.ToTable("AddressAttribute");
                });

            modelBuilder.Entity("Nop.Core.Domain.Common.AddressAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressAttributeId");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IsPreSelected");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.HasKey("Id");

                    b.HasIndex("AddressAttributeId");

                    b.ToTable("AddressAttributeValue");
                });

            modelBuilder.Entity("Nop.Core.Domain.Common.GenericAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntityId");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<string>("KeyGroup")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<int>("StoreId");

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("GenericAttribute");
                });

            modelBuilder.Entity("Nop.Core.Domain.Common.SearchTerm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<string>("Keyword");

                    b.Property<int>("StoreId");

                    b.HasKey("Id");

                    b.ToTable("SearchTerm");
                });

            modelBuilder.Entity("Nop.Core.Domain.Configuration.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("StoreId");

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Setting");
                });

            modelBuilder.Entity("Nop.Core.Domain.Customers.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("AdminComment");

                    b.Property<int>("AffiliateId");

                    b.Property<int?>("BillingAddressId")
                        .HasColumnName("BillingAddress_Id");

                    b.Property<DateTime?>("CannotLoginUntilDateUtc");

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<Guid>("CustomerGuid");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Email")
                        .HasMaxLength(1000);

                    b.Property<string>("EmailToRevalidate")
                        .HasMaxLength(1000);

                    b.Property<int>("FailedLoginAttempts");

                    b.Property<bool>("HasShoppingCartItems");

                    b.Property<bool>("IsSystemAccount");

                    b.Property<bool>("IsTaxExempt");

                    b.Property<DateTime>("LastActivityDateUtc");

                    b.Property<string>("LastIpAddress");

                    b.Property<DateTime?>("LastLoginDateUtc");

                    b.Property<int>("RegisteredInStoreId");

                    b.Property<bool>("RequireReLogin");

                    b.Property<int?>("ShippingAddressId")
                        .HasColumnName("ShippingAddress_Id");

                    b.Property<string>("SystemName")
                        .HasMaxLength(400);

                    b.Property<string>("Username")
                        .HasMaxLength(1000);

                    b.Property<int>("VendorId");

                    b.HasKey("Id");

                    b.HasIndex("BillingAddressId");

                    b.HasIndex("ShippingAddressId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Nop.Core.Domain.Customers.CustomerAddressMapping", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnName("Customer_Id");

                    b.Property<int>("AddressId")
                        .HasColumnName("Address_Id");

                    b.HasKey("CustomerId", "AddressId");

                    b.HasIndex("AddressId");

                    b.ToTable("CustomerAddresses");
                });

            modelBuilder.Entity("Nop.Core.Domain.Customers.CustomerAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttributeControlTypeId");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IsRequired");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.HasKey("Id");

                    b.ToTable("CustomerAttribute");
                });

            modelBuilder.Entity("Nop.Core.Domain.Customers.CustomerAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerAttributeId");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IsPreSelected");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.HasKey("Id");

                    b.HasIndex("CustomerAttributeId");

                    b.ToTable("CustomerAttributeValue");
                });

            modelBuilder.Entity("Nop.Core.Domain.Customers.CustomerCustomerRoleMapping", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnName("Customer_Id");

                    b.Property<int>("CustomerRoleId")
                        .HasColumnName("CustomerRole_Id");

                    b.HasKey("CustomerId", "CustomerRoleId");

                    b.HasIndex("CustomerRoleId");

                    b.ToTable("Customer_CustomerRole_Mapping");
                });

            modelBuilder.Entity("Nop.Core.Domain.Customers.CustomerPassword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<int>("CustomerId");

                    b.Property<string>("Password");

                    b.Property<int>("PasswordFormatId");

                    b.Property<string>("PasswordSalt");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerPassword");
                });

            modelBuilder.Entity("Nop.Core.Domain.Customers.CustomerRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("DefaultTaxDisplayTypeId");

                    b.Property<bool>("EnablePasswordLifetime");

                    b.Property<bool>("FreeShipping");

                    b.Property<bool>("IsSystemRole");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<bool>("OverrideTaxDisplayType");

                    b.Property<int>("PurchasedWithProductId");

                    b.Property<string>("SystemName")
                        .HasMaxLength(255);

                    b.Property<bool>("TaxExempt");

                    b.HasKey("Id");

                    b.ToTable("CustomerRole");
                });

            modelBuilder.Entity("Nop.Core.Domain.Customers.ExternalAuthenticationRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId");

                    b.Property<string>("Email");

                    b.Property<string>("ExternalDisplayIdentifier");

                    b.Property<string>("ExternalIdentifier");

                    b.Property<string>("OAuthAccessToken");

                    b.Property<string>("OAuthToken");

                    b.Property<string>("ProviderSystemName");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("ExternalAuthenticationRecord");
                });

            modelBuilder.Entity("Nop.Core.Domain.Customers.RewardPointsHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<int>("CustomerId");

                    b.Property<DateTime?>("EndDateUtc");

                    b.Property<string>("Message");

                    b.Property<int>("Points");

                    b.Property<int?>("PointsBalance");

                    b.Property<int>("StoreId");

                    b.Property<decimal>("UsedAmount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int?>("ValidPoints");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("RewardPointsHistory");
                });

            modelBuilder.Entity("Nop.Core.Domain.Directory.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowsBilling");

                    b.Property<bool>("AllowsShipping");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("LimitedToStores");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("NumericIsoCode");

                    b.Property<bool>("Published");

                    b.Property<bool>("SubjectToVat");

                    b.Property<string>("ThreeLetterIsoCode")
                        .HasMaxLength(3);

                    b.Property<string>("TwoLetterIsoCode")
                        .HasMaxLength(2);

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Nop.Core.Domain.Directory.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("CustomFormatting")
                        .HasMaxLength(50);

                    b.Property<string>("DisplayLocale")
                        .HasMaxLength(50);

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("LimitedToStores");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Published");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("RoundingTypeId");

                    b.Property<DateTime>("UpdatedOnUtc");

                    b.HasKey("Id");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("Nop.Core.Domain.Directory.MeasureDimension", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<decimal>("Ratio")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<string>("SystemKeyword")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("MeasureDimension");
                });

            modelBuilder.Entity("Nop.Core.Domain.Directory.MeasureWeight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<decimal>("Ratio")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<string>("SystemKeyword")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("MeasureWeight");
                });

            modelBuilder.Entity("Nop.Core.Domain.Directory.StateProvince", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(100);

                    b.Property<int>("CountryId");

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("Published");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("StateProvince");
                });

            modelBuilder.Entity("Nop.Core.Domain.Discounts.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminComment");

                    b.Property<bool>("AppliedToSubCategories");

                    b.Property<string>("CouponCode")
                        .HasMaxLength(100);

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("DiscountLimitationId");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("DiscountTypeId");

                    b.Property<DateTime?>("EndDateUtc");

                    b.Property<bool>("IsCumulative");

                    b.Property<int>("LimitationTimes");

                    b.Property<decimal?>("MaximumDiscountAmount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int?>("MaximumDiscountedQuantity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<bool>("RequiresCouponCode");

                    b.Property<DateTime?>("StartDateUtc");

                    b.Property<bool>("UsePercentage");

                    b.HasKey("Id");

                    b.ToTable("Discount");
                });

            modelBuilder.Entity("Nop.Core.Domain.Discounts.DiscountCategoryMapping", b =>
                {
                    b.Property<int>("DiscountId")
                        .HasColumnName("Discount_Id");

                    b.Property<int>("CategoryId")
                        .HasColumnName("Category_Id");

                    b.HasKey("DiscountId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Discount_AppliedToCategories");
                });

            modelBuilder.Entity("Nop.Core.Domain.Discounts.DiscountManufacturerMapping", b =>
                {
                    b.Property<int>("DiscountId")
                        .HasColumnName("Discount_Id");

                    b.Property<int>("ManufacturerId")
                        .HasColumnName("Manufacturer_Id");

                    b.HasKey("DiscountId", "ManufacturerId");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Discount_AppliedToManufacturers");
                });

            modelBuilder.Entity("Nop.Core.Domain.Discounts.DiscountProductMapping", b =>
                {
                    b.Property<int>("DiscountId")
                        .HasColumnName("Discount_Id");

                    b.Property<int>("ProductId")
                        .HasColumnName("Product_Id");

                    b.HasKey("DiscountId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("Discount_AppliedToProducts");
                });

            modelBuilder.Entity("Nop.Core.Domain.Discounts.DiscountRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DiscountId");

                    b.Property<string>("DiscountRequirementRuleSystemName");

                    b.Property<int?>("InteractionTypeId");

                    b.Property<bool>("IsGroup");

                    b.Property<int?>("ParentId");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("ParentId");

                    b.ToTable("DiscountRequirement");
                });

            modelBuilder.Entity("Nop.Core.Domain.Discounts.DiscountUsageHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<int>("DiscountId");

                    b.Property<int>("OrderId");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("OrderId");

                    b.ToTable("DiscountUsageHistory");
                });

            modelBuilder.Entity("Nop.Core.Domain.Forums.Forum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<string>("Description");

                    b.Property<int>("DisplayOrder");

                    b.Property<int>("ForumGroupId");

                    b.Property<int>("LastPostCustomerId");

                    b.Property<int>("LastPostId");

                    b.Property<DateTime?>("LastPostTime");

                    b.Property<int>("LastTopicId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("NumPosts");

                    b.Property<int>("NumTopics");

                    b.Property<DateTime>("UpdatedOnUtc");

                    b.HasKey("Id");

                    b.HasIndex("ForumGroupId");

                    b.ToTable("Forums_Forum");
                });

            modelBuilder.Entity("Nop.Core.Domain.Forums.ForumGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedOnUtc");

                    b.HasKey("Id");

                    b.ToTable("Forums_Group");
                });

            modelBuilder.Entity("Nop.Core.Domain.Forums.ForumPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<int>("CustomerId");

                    b.Property<string>("IPAddress")
                        .HasMaxLength(100);

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<int>("TopicId");

                    b.Property<DateTime>("UpdatedOnUtc");

                    b.Property<int>("VoteCount");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TopicId");

                    b.ToTable("Forums_Post");
                });

            modelBuilder.Entity("Nop.Core.Domain.Forums.ForumPostVote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<int>("CustomerId");

                    b.Property<int>("ForumPostId");

                    b.Property<bool>("IsUp");

                    b.HasKey("Id");

                    b.HasIndex("ForumPostId");

                    b.ToTable("Forums_PostVote");
                });

            modelBuilder.Entity("Nop.Core.Domain.Forums.ForumSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<int>("CustomerId");

                    b.Property<int>("ForumId");

                    b.Property<Guid>("SubscriptionGuid");

                    b.Property<int>("TopicId");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Forums_Subscription");
                });

            modelBuilder.Entity("Nop.Core.Domain.Forums.ForumTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<int>("CustomerId");

                    b.Property<int>("ForumId");

                    b.Property<int>("LastPostCustomerId");

                    b.Property<int>("LastPostId");

                    b.Property<DateTime?>("LastPostTime");

                    b.Property<int>("NumPosts");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<int>("TopicTypeId");

                    b.Property<DateTime>("UpdatedOnUtc");

                    b.Property<int>("Views");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ForumId");

                    b.ToTable("Forums_Topic");
                });

            modelBuilder.Entity("Nop.Core.Domain.Forums.PrivateMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<int>("FromCustomerId");

                    b.Property<bool>("IsDeletedByAuthor");

                    b.Property<bool>("IsDeletedByRecipient");

                    b.Property<bool>("IsRead");

                    b.Property<int>("StoreId");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<int>("ToCustomerId");

                    b.HasKey("Id");

                    b.HasIndex("FromCustomerId");

                    b.HasIndex("ToCustomerId");

                    b.ToTable("Forums_PrivateMessage");
                });

            modelBuilder.Entity("Nop.Core.Domain.Gdpr.GdprConsent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DisplayDuringRegistration");

                    b.Property<bool>("DisplayOnCustomerInfoPage");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IsRequired");

                    b.Property<string>("Message")
                        .IsRequired();

                    b.Property<string>("RequiredMessage");

                    b.HasKey("Id");

                    b.ToTable("GdprConsent");
                });

            modelBuilder.Entity("Nop.Core.Domain.Gdpr.GdprLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConsentId");

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<int>("CustomerId");

                    b.Property<string>("CustomerInfo");

                    b.Property<string>("RequestDetails");

                    b.Property<int>("RequestTypeId");

                    b.HasKey("Id");

                    b.ToTable("GdprLog");
                });

            modelBuilder.Entity("Nop.Core.Domain.Localization.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DefaultCurrencyId");

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("FlagImageFileName")
                        .HasMaxLength(50);

                    b.Property<string>("LanguageCulture")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<bool>("LimitedToStores");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("Published");

                    b.Property<bool>("Rtl");

                    b.Property<string>("UniqueSeoCode")
                        .HasMaxLength(2);

                    b.HasKey("Id");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("Nop.Core.Domain.Localization.LocaleStringResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LanguageId");

                    b.Property<string>("ResourceName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("ResourceValue")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("LocaleStringResource");
                });

            modelBuilder.Entity("Nop.Core.Domain.Localization.LocalizedProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntityId");

                    b.Property<int>("LanguageId");

                    b.Property<string>("LocaleKey")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<string>("LocaleKeyGroup")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<string>("LocaleValue")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("LocalizedProperty");
                });

            modelBuilder.Entity("Nop.Core.Domain.Logging.ActivityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityLogTypeId");

                    b.Property<string>("Comment")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<int>("CustomerId");

                    b.Property<int?>("EntityId");

                    b.Property<string>("EntityName")
                        .HasMaxLength(400);

                    b.Property<string>("IpAddress")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ActivityLogTypeId");

                    b.HasIndex("CustomerId");

                    b.ToTable("ActivityLog");
                });

            modelBuilder.Entity("Nop.Core.Domain.Logging.ActivityLogType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("SystemKeyword")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ActivityLogType");
                });

            modelBuilder.Entity("Nop.Core.Domain.Logging.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<int?>("CustomerId");

                    b.Property<string>("FullMessage");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(200);

                    b.Property<int>("LogLevelId");

                    b.Property<string>("PageUrl");

                    b.Property<string>("ReferrerUrl");

                    b.Property<string>("ShortMessage")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("Nop.Core.Domain.Media.Download", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentType");

                    b.Property<byte[]>("DownloadBinary");

                    b.Property<Guid>("DownloadGuid");

                    b.Property<string>("DownloadUrl");

                    b.Property<string>("Extension");

                    b.Property<string>("Filename");

                    b.Property<bool>("IsNew");

                    b.Property<bool>("UseDownloadUrl");

                    b.HasKey("Id");

                    b.ToTable("Download");
                });

            modelBuilder.Entity("Nop.Core.Domain.Media.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AltAttribute");

                    b.Property<bool>("IsNew");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<string>("SeoFilename")
                        .HasMaxLength(300);

                    b.Property<string>("TitleAttribute");

                    b.Property<string>("VirtualPath");

                    b.HasKey("Id");

                    b.ToTable("Picture");
                });

            modelBuilder.Entity("Nop.Core.Domain.Media.PictureBinary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("BinaryData");

                    b.Property<int>("PictureId");

                    b.HasKey("Id");

                    b.HasIndex("PictureId")
                        .IsUnique();

                    b.ToTable("PictureBinary");
                });

            modelBuilder.Entity("Nop.Core.Domain.Messages.Campaign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<int>("CustomerRoleId");

                    b.Property<DateTime?>("DontSendBeforeDateUtc");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("StoreId");

                    b.Property<string>("Subject")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Campaign");
                });

            modelBuilder.Entity("Nop.Core.Domain.Messages.EmailAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<bool>("EnableSsl");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("Port");

                    b.Property<bool>("UseDefaultCredentials");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("EmailAccount");
                });

            modelBuilder.Entity("Nop.Core.Domain.Messages.MessageTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttachedDownloadId");

                    b.Property<string>("BccEmailAddresses")
                        .HasMaxLength(200);

                    b.Property<string>("Body");

                    b.Property<int?>("DelayBeforeSend");

                    b.Property<int>("DelayPeriodId");

                    b.Property<int>("EmailAccountId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("LimitedToStores");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Subject")
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.ToTable("MessageTemplate");
                });

            modelBuilder.Entity("Nop.Core.Domain.Messages.NewsLetterSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<Guid>("NewsLetterSubscriptionGuid");

                    b.Property<int>("StoreId");

                    b.HasKey("Id");

                    b.ToTable("NewsLetterSubscription");
                });

            modelBuilder.Entity("Nop.Core.Domain.Messages.QueuedEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttachedDownloadId");

                    b.Property<string>("AttachmentFileName");

                    b.Property<string>("AttachmentFilePath");

                    b.Property<string>("Bcc")
                        .HasMaxLength(500);

                    b.Property<string>("Body");

                    b.Property<string>("CC")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<DateTime?>("DontSendBeforeDateUtc");

                    b.Property<int>("EmailAccountId");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("FromName")
                        .HasMaxLength(500);

                    b.Property<int>("PriorityId");

                    b.Property<string>("ReplyTo")
                        .HasMaxLength(500);

                    b.Property<string>("ReplyToName")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("SentOnUtc");

                    b.Property<int>("SentTries");

                    b.Property<string>("Subject")
                        .HasMaxLength(1000);

                    b.Property<string>("To")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("ToName")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("EmailAccountId");

                    b.ToTable("QueuedEmail");
                });

            modelBuilder.Entity("Nop.Core.Domain.News.NewsComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommentText");

                    b.Property<string>("CommentTitle");

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<int>("CustomerId");

                    b.Property<bool>("IsApproved");

                    b.Property<int>("NewsItemId");

                    b.Property<int>("StoreId");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("NewsItemId");

                    b.HasIndex("StoreId");

                    b.ToTable("NewsComment");
                });

            modelBuilder.Entity("Nop.Core.Domain.News.NewsItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowComments");

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<DateTime?>("EndDateUtc");

                    b.Property<string>("Full")
                        .IsRequired();

                    b.Property<int>("LanguageId");

                    b.Property<bool>("LimitedToStores");

                    b.Property<string>("MetaDescription");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(400);

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(400);

                    b.Property<bool>("Published");

                    b.Property<string>("Short")
                        .IsRequired();

                    b.Property<DateTime?>("StartDateUtc");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("Nop.Core.Domain.Orders.CheckoutAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttributeControlTypeId");

                    b.Property<string>("ConditionAttributeXml");

                    b.Property<string>("DefaultValue");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IsRequired");

                    b.Property<bool>("IsTaxExempt");

                    b.Property<bool>("LimitedToStores");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<bool>("ShippableProductRequired");

                    b.Property<int>("TaxCategoryId");

                    b.Property<string>("TextPrompt");

                    b.Property<string>("ValidationFileAllowedExtensions");

                    b.Property<int?>("ValidationFileMaximumSize");

                    b.Property<int?>("ValidationMaxLength");

                    b.Property<int?>("ValidationMinLength");

                    b.HasKey("Id");

                    b.ToTable("CheckoutAttribute");
                });

            modelBuilder.Entity("Nop.Core.Domain.Orders.CheckoutAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CheckoutAttributeId");

                    b.Property<string>("ColorSquaresRgb")
                        .HasMaxLength(100);

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IsPreSelected");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<decimal>("PriceAdjustment")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("WeightAdjustment")
                        .HasColumnType("decimal(18, 4)");

                    b.HasKey("Id");

                    b.HasIndex("CheckoutAttributeId");

                    b.ToTable("CheckoutAttributeValue");
                });

            modelBuilder.Entity("Nop.Core.Domain.Orders.GiftCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<string>("GiftCardCouponCode");

                    b.Property<int>("GiftCardTypeId");

                    b.Property<bool>("IsGiftCardActivated");

                    b.Property<bool>("IsRecipientNotified");

                    b.Property<string>("Message");

                    b.Property<int?>("PurchasedWithOrderItemId");

                    b.Property<string>("RecipientEmail");

                    b.Property<string>("RecipientName");

                    b.Property<string>("SenderEmail");

                    b.Property<string>("SenderName");

                    b.HasKey("Id");

                    b.HasIndex("PurchasedWithOrderItemId");

                    b.ToTable("GiftCard");
                });

            modelBuilder.Entity("Nop.Core.Domain.Orders.GiftCardUsageHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<int>("GiftCardId");

                    b.Property<decimal>("UsedValue")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("UsedWithOrderId");

                    b.HasKey("Id");

                    b.HasIndex("GiftCardId");

                    b.HasIndex("UsedWithOrderId");

                    b.ToTable("GiftCardUsageHistory");
                });

            modelBuilder.Entity("Nop.Core.Domain.Orders.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AffiliateId");

                    b.Property<bool>("AllowStoringCreditCardNumber");

                    b.Property<string>("AuthorizationTransactionCode");

                    b.Property<string>("AuthorizationTransactionId");

                    b.Property<string>("AuthorizationTransactionResult");

                    b.Property<int>("BillingAddressId");

                    b.Property<string>("CaptureTransactionId");

                    b.Property<string>("CaptureTransactionResult");

                    b.Property<string>("CardCvv2");

                    b.Property<string>("CardExpirationMonth");

                    b.Property<string>("CardExpirationYear");

                    b.Property<string>("CardName");

                    b.Property<string>("CardNumber");

                    b.Property<string>("CardType");

                    b.Property<string>("CheckoutAttributeDescription");

                    b.Property<string>("CheckoutAttributesXml");

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<decimal>("CurrencyRate")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<string>("CustomOrderNumber")
                        .IsRequired();

                    b.Property<string>("CustomValuesXml");

                    b.Property<string>("CustomerCurrencyCode");

                    b.Property<int>("CustomerId");

                    b.Property<string>("CustomerIp");

                    b.Property<int>("CustomerLanguageId");

                    b.Property<int>("CustomerTaxDisplayTypeId");

                    b.Property<bool>("Deleted");

                    b.Property<string>("MaskedCreditCardNumber");

                    b.Property<decimal>("OrderDiscount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<Guid>("OrderGuid");

                    b.Property<decimal>("OrderShippingExclTax")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("OrderShippingInclTax")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("OrderStatusId");

                    b.Property<decimal>("OrderSubTotalDiscountExclTax")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("OrderSubTotalDiscountInclTax")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("OrderSubtotalExclTax")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("OrderSubtotalInclTax")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("OrderTax")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("OrderTotal")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<DateTime?>("PaidDateUtc");

                    b.Property<decimal>("PaymentMethodAdditionalFeeExclTax")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("PaymentMethodAdditionalFeeInclTax")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("PaymentMethodSystemName");

                    b.Property<int>("PaymentStatusId");

                    b.Property<int?>("PickupAddressId");

                    b.Property<bool>("PickupInStore");

                    b.Property<decimal>("RefundedAmount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int?>("RewardPointsHistoryEntryId");

                    b.Property<int?>("ShippingAddressId");

                    b.Property<string>("ShippingMethod");

                    b.Property<string>("ShippingRateComputationMethodSystemName");

                    b.Property<int>("ShippingStatusId");

                    b.Property<int>("StoreId");

                    b.Property<string>("SubscriptionTransactionId");

                    b.Property<string>("TaxRates");

                    b.Property<string>("VatNumber");

                    b.HasKey("Id");

                    b.HasIndex("BillingAddressId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PickupAddressId");

                    b.HasIndex("RewardPointsHistoryEntryId")
                        .IsUnique()
                        .HasFilter("[RewardPointsHistoryEntryId] IS NOT NULL");

                    b.HasIndex("ShippingAddressId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Nop.Core.Domain.Orders.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttributeDescription");

                    b.Property<string>("AttributesXml");

                    b.Property<decimal>("DiscountAmountExclTax")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("DiscountAmountInclTax")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("DownloadCount");

                    b.Property<bool>("IsDownloadActivated");

                    b.Property<decimal?>("ItemWeight")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int?>("LicenseDownloadId");

                    b.Property<int>("OrderId");

                    b.Property<Guid>("OrderItemGuid");

                    b.Property<decimal>("OriginalProductCost")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("PriceExclTax")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("PriceInclTax")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("ProductId");

                    b.Property<int>("Quantity");

                    b.Property<DateTime?>("RentalEndDateUtc");

                    b.Property<DateTime?>("RentalStartDateUtc");

                    b.Property<decimal>("UnitPriceExclTax")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("UnitPriceInclTax")
                        .HasColumnType("decimal(18, 4)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("Nop.Core.Domain.Orders.OrderNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<bool>("DisplayToCustomer");

                    b.Property<int>("DownloadId");

                    b.Property<string>("Note")
                        .IsRequired();

                    b.Property<int>("OrderId");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderNote");
                });

            modelBuilder.Entity("Nop.Core.Domain.Orders.RecurringPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<int>("CycleLength");

                    b.Property<int>("CyclePeriodId");

                    b.Property<bool>("Deleted");

                    b.Property<int>("InitialOrderId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("LastPaymentFailed");

                    b.Property<DateTime>("StartDateUtc");

                    b.Property<int>("TotalCycles");

                    b.HasKey("Id");

                    b.HasIndex("InitialOrderId");

                    b.ToTable("RecurringPayment");
                });

            modelBuilder.Entity("Nop.Core.Domain.Orders.RecurringPaymentHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<int>("OrderId");

                    b.Property<int>("RecurringPaymentId");

                    b.HasKey("Id");

                    b.HasIndex("RecurringPaymentId");

                    b.ToTable("RecurringPaymentHistory");
                });

            modelBuilder.Entity("Nop.Core.Domain.Orders.ReturnRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<string>("CustomNumber");

                    b.Property<string>("CustomerComments");

                    b.Property<int>("CustomerId");

                    b.Property<int>("OrderItemId");

                    b.Property<int>("Quantity");

                    b.Property<string>("ReasonForReturn")
                        .IsRequired();

                    b.Property<string>("RequestedAction")
                        .IsRequired();

                    b.Property<int>("ReturnRequestStatusId");

                    b.Property<string>("StaffNotes");

                    b.Property<int>("StoreId");

                    b.Property<DateTime>("UpdatedOnUtc");

                    b.Property<int>("UploadedFileId");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("ReturnRequest");
                });

            modelBuilder.Entity("Nop.Core.Domain.Orders.ReturnRequestAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.HasKey("Id");

                    b.ToTable("ReturnRequestAction");
                });

            modelBuilder.Entity("Nop.Core.Domain.Orders.ReturnRequestReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.HasKey("Id");

                    b.ToTable("ReturnRequestReason");
                });

            modelBuilder.Entity("Nop.Core.Domain.Orders.ShoppingCartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttributesXml");

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<decimal>("CustomerEnteredPrice")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("CustomerId");

                    b.Property<int>("ProductId");

                    b.Property<int>("Quantity");

                    b.Property<DateTime?>("RentalEndDateUtc");

                    b.Property<DateTime?>("RentalStartDateUtc");

                    b.Property<int>("ShoppingCartTypeId");

                    b.Property<int>("StoreId");

                    b.Property<DateTime>("UpdatedOnUtc");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("ShoppingCartItem");
                });

            modelBuilder.Entity("Nop.Core.Domain.Polls.Poll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowGuestsToVote");

                    b.Property<int>("DisplayOrder");

                    b.Property<DateTime?>("EndDateUtc");

                    b.Property<int>("LanguageId");

                    b.Property<bool>("LimitedToStores");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("Published");

                    b.Property<bool>("ShowOnHomepage");

                    b.Property<DateTime?>("StartDateUtc");

                    b.Property<string>("SystemKeyword");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("Poll");
                });

            modelBuilder.Entity("Nop.Core.Domain.Polls.PollAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("NumberOfVotes");

                    b.Property<int>("PollId");

                    b.HasKey("Id");

                    b.HasIndex("PollId");

                    b.ToTable("PollAnswer");
                });

            modelBuilder.Entity("Nop.Core.Domain.Polls.PollVotingRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<int>("CustomerId");

                    b.Property<int>("PollAnswerId");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PollAnswerId");

                    b.ToTable("PollVotingRecord");
                });

            modelBuilder.Entity("Nop.Core.Domain.Security.AclRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerRoleId");

                    b.Property<int>("EntityId");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.HasKey("Id");

                    b.HasIndex("CustomerRoleId");

                    b.ToTable("AclRecord");
                });

            modelBuilder.Entity("Nop.Core.Domain.Security.PermissionRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("PermissionRecord");
                });

            modelBuilder.Entity("Nop.Core.Domain.Security.PermissionRecordCustomerRoleMapping", b =>
                {
                    b.Property<int>("PermissionRecordId")
                        .HasColumnName("PermissionRecord_Id");

                    b.Property<int>("CustomerRoleId")
                        .HasColumnName("CustomerRole_Id");

                    b.HasKey("PermissionRecordId", "CustomerRoleId");

                    b.HasIndex("CustomerRoleId");

                    b.ToTable("PermissionRecord_Role_Mapping");
                });

            modelBuilder.Entity("Nop.Core.Domain.Seo.UrlRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntityId");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<bool>("IsActive");

                    b.Property<int>("LanguageId");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.HasKey("Id");

                    b.ToTable("UrlRecord");
                });

            modelBuilder.Entity("Nop.Core.Domain.Shipping.DeliveryDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.HasKey("Id");

                    b.ToTable("DeliveryDate");
                });

            modelBuilder.Entity("Nop.Core.Domain.Shipping.ProductAvailabilityRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.HasKey("Id");

                    b.ToTable("ProductAvailabilityRange");
                });

            modelBuilder.Entity("Nop.Core.Domain.Shipping.Shipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminComment");

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<DateTime?>("DeliveryDateUtc");

                    b.Property<int>("OrderId");

                    b.Property<DateTime?>("ShippedDateUtc");

                    b.Property<decimal?>("TotalWeight")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("TrackingNumber");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Shipment");
                });

            modelBuilder.Entity("Nop.Core.Domain.Shipping.ShipmentItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderItemId");

                    b.Property<int>("Quantity");

                    b.Property<int>("ShipmentId");

                    b.Property<int>("WarehouseId");

                    b.HasKey("Id");

                    b.HasIndex("ShipmentId");

                    b.ToTable("ShipmentItem");
                });

            modelBuilder.Entity("Nop.Core.Domain.Shipping.ShippingMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.HasKey("Id");

                    b.ToTable("ShippingMethod");
                });

            modelBuilder.Entity("Nop.Core.Domain.Shipping.ShippingMethodCountryMapping", b =>
                {
                    b.Property<int>("ShippingMethodId")
                        .HasColumnName("ShippingMethod_Id");

                    b.Property<int>("CountryId")
                        .HasColumnName("Country_Id");

                    b.HasKey("ShippingMethodId", "CountryId");

                    b.HasIndex("CountryId");

                    b.ToTable("ShippingMethodRestrictions");
                });

            modelBuilder.Entity("Nop.Core.Domain.Shipping.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId");

                    b.Property<string>("AdminComment");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.HasKey("Id");

                    b.ToTable("Warehouse");
                });

            modelBuilder.Entity("Nop.Core.Domain.Stores.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyAddress")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanyName")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanyPhoneNumber")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanyVat")
                        .HasMaxLength(1000);

                    b.Property<int>("DefaultLanguageId");

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("Hosts")
                        .HasMaxLength(1000);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<bool>("SslEnabled");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.HasKey("Id");

                    b.ToTable("Store");
                });

            modelBuilder.Entity("Nop.Core.Domain.Stores.StoreMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntityId");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<int>("StoreId");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("StoreMapping");
                });

            modelBuilder.Entity("Nop.Core.Domain.Tasks.ScheduleTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Enabled");

                    b.Property<DateTime?>("LastEndUtc");

                    b.Property<DateTime?>("LastStartUtc");

                    b.Property<DateTime?>("LastSuccessUtc");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Seconds");

                    b.Property<bool>("StopOnError");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ScheduleTask");
                });

            modelBuilder.Entity("Nop.Core.Domain.Tax.TaxCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.HasKey("Id");

                    b.ToTable("TaxCategory");
                });

            modelBuilder.Entity("Nop.Core.Domain.Topics.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AccessibleWhenStoreClosed");

                    b.Property<string>("Body");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IncludeInFooterColumn1");

                    b.Property<bool>("IncludeInFooterColumn2");

                    b.Property<bool>("IncludeInFooterColumn3");

                    b.Property<bool>("IncludeInSitemap");

                    b.Property<bool>("IncludeInTopMenu");

                    b.Property<bool>("IsPasswordProtected");

                    b.Property<bool>("LimitedToStores");

                    b.Property<string>("MetaDescription");

                    b.Property<string>("MetaKeywords");

                    b.Property<string>("MetaTitle");

                    b.Property<string>("Password");

                    b.Property<bool>("Published");

                    b.Property<bool>("SubjectToAcl");

                    b.Property<string>("SystemName");

                    b.Property<string>("Title");

                    b.Property<int>("TopicTemplateId");

                    b.HasKey("Id");

                    b.ToTable("Topic");
                });

            modelBuilder.Entity("Nop.Core.Domain.Topics.TopicTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<string>("ViewPath")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.HasKey("Id");

                    b.ToTable("TopicTemplate");
                });

            modelBuilder.Entity("Nop.Core.Domain.Vendors.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("AddressId");

                    b.Property<string>("AdminComment");

                    b.Property<bool>("AllowCustomersToSelectPageSize");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description");

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("Email")
                        .HasMaxLength(400);

                    b.Property<string>("MetaDescription");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(400);

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(400);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<int>("PageSize");

                    b.Property<string>("PageSizeOptions")
                        .HasMaxLength(200);

                    b.Property<int>("PictureId");

                    b.HasKey("Id");

                    b.ToTable("Vendor");
                });

            modelBuilder.Entity("Nop.Core.Domain.Vendors.VendorAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttributeControlTypeId");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IsRequired");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.HasKey("Id");

                    b.ToTable("VendorAttribute");
                });

            modelBuilder.Entity("Nop.Core.Domain.Vendors.VendorAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IsPreSelected");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<int>("VendorAttributeId");

                    b.HasKey("Id");

                    b.HasIndex("VendorAttributeId");

                    b.ToTable("VendorAttributeValue");
                });

            modelBuilder.Entity("Nop.Core.Domain.Vendors.VendorNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<string>("Note")
                        .IsRequired();

                    b.Property<int>("VendorId");

                    b.HasKey("Id");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorNote");
                });

            modelBuilder.Entity("Nop.Core.Domain.Affiliates.Affiliate", b =>
                {
                    b.HasOne("Nop.Core.Domain.Common.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Nop.Core.Domain.Blogs.BlogComment", b =>
                {
                    b.HasOne("Nop.Core.Domain.Blogs.BlogPost", "BlogPost")
                        .WithMany("BlogComments")
                        .HasForeignKey("BlogPostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nop.Core.Domain.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nop.Core.Domain.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Blogs.BlogPost", b =>
                {
                    b.HasOne("Nop.Core.Domain.Localization.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Catalog.BackInStockSubscription", b =>
                {
                    b.HasOne("Nop.Core.Domain.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nop.Core.Domain.Catalog.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Catalog.PredefinedProductAttributeValue", b =>
                {
                    b.HasOne("Nop.Core.Domain.Catalog.ProductAttribute", "ProductAttribute")
                        .WithMany()
                        .HasForeignKey("ProductAttributeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Catalog.ProductAttributeCombination", b =>
                {
                    b.HasOne("Nop.Core.Domain.Catalog.Product", "Product")
                        .WithMany("ProductAttributeCombinations")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Catalog.ProductAttributeMapping", b =>
                {
                    b.HasOne("Nop.Core.Domain.Catalog.ProductAttribute", "ProductAttribute")
                        .WithMany()
                        .HasForeignKey("ProductAttributeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nop.Core.Domain.Catalog.Product", "Product")
                        .WithMany("ProductAttributeMappings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Catalog.ProductAttributeValue", b =>
                {
                    b.HasOne("Nop.Core.Domain.Catalog.ProductAttributeMapping", "ProductAttributeMapping")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("ProductAttributeMappingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Catalog.ProductCategory", b =>
                {
                    b.HasOne("Nop.Core.Domain.Catalog.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nop.Core.Domain.Catalog.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Catalog.ProductManufacturer", b =>
                {
                    b.HasOne("Nop.Core.Domain.Catalog.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nop.Core.Domain.Catalog.Product", "Product")
                        .WithMany("ProductManufacturers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Catalog.ProductPicture", b =>
                {
                    b.HasOne("Nop.Core.Domain.Media.Picture", "Picture")
                        .WithMany()
                        .HasForeignKey("PictureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nop.Core.Domain.Catalog.Product", "Product")
                        .WithMany("ProductPictures")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Catalog.ProductProductTagMapping", b =>
                {
                    b.HasOne("Nop.Core.Domain.Catalog.Product", "Product")
                        .WithMany("ProductProductTagMappings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nop.Core.Domain.Catalog.ProductTag", "ProductTag")
                        .WithMany("ProductProductTagMappings")
                        .HasForeignKey("ProductTagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Catalog.ProductReview", b =>
                {
                    b.HasOne("Nop.Core.Domain.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nop.Core.Domain.Catalog.Product", "Product")
                        .WithMany("ProductReviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nop.Core.Domain.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Catalog.ProductReviewHelpfulness", b =>
                {
                    b.HasOne("Nop.Core.Domain.Catalog.ProductReview", "ProductReview")
                        .WithMany("ProductReviewHelpfulnessEntries")
                        .HasForeignKey("ProductReviewId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Catalog.ProductReviewReviewTypeMapping", b =>
                {
                    b.HasOne("Nop.Core.Domain.Catalog.ProductReview", "ProductReview")
                        .WithMany("ProductReviewReviewTypeMappingEntries")
                        .HasForeignKey("ProductReviewId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nop.Core.Domain.Catalog.ReviewType", "ReviewType")
                        .WithMany()
                        .HasForeignKey("ReviewTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Catalog.ProductSpecificationAttribute", b =>
                {
                    b.HasOne("Nop.Core.Domain.Catalog.Product", "Product")
                        .WithMany("ProductSpecificationAttributes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nop.Core.Domain.Catalog.SpecificationAttributeOption", "SpecificationAttributeOption")
                        .WithMany()
                        .HasForeignKey("SpecificationAttributeOptionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Catalog.ProductWarehouseInventory", b =>
                {
                    b.HasOne("Nop.Core.Domain.Catalog.Product", "Product")
                        .WithMany("ProductWarehouseInventory")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nop.Core.Domain.Shipping.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Catalog.SpecificationAttributeOption", b =>
                {
                    b.HasOne("Nop.Core.Domain.Catalog.SpecificationAttribute", "SpecificationAttribute")
                        .WithMany("SpecificationAttributeOptions")
                        .HasForeignKey("SpecificationAttributeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Catalog.StockQuantityHistory", b =>
                {
                    b.HasOne("Nop.Core.Domain.Catalog.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Catalog.TierPrice", b =>
                {
                    b.HasOne("Nop.Core.Domain.Customers.CustomerRole", "CustomerRole")
                        .WithMany()
                        .HasForeignKey("CustomerRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nop.Core.Domain.Catalog.Product", "Product")
                        .WithMany("TierPrices")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Common.Address", b =>
                {
                    b.HasOne("Nop.Core.Domain.Directory.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("Nop.Core.Domain.Directory.StateProvince", "StateProvince")
                        .WithMany()
                        .HasForeignKey("StateProvinceId");
                });

            modelBuilder.Entity("Nop.Core.Domain.Common.AddressAttributeValue", b =>
                {
                    b.HasOne("Nop.Core.Domain.Common.AddressAttribute", "AddressAttribute")
                        .WithMany("AddressAttributeValues")
                        .HasForeignKey("AddressAttributeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Customers.Customer", b =>
                {
                    b.HasOne("Nop.Core.Domain.Common.Address", "BillingAddress")
                        .WithMany()
                        .HasForeignKey("BillingAddressId");

                    b.HasOne("Nop.Core.Domain.Common.Address", "ShippingAddress")
                        .WithMany()
                        .HasForeignKey("ShippingAddressId");
                });

            modelBuilder.Entity("Nop.Core.Domain.Customers.CustomerAddressMapping", b =>
                {
                    b.HasOne("Nop.Core.Domain.Common.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nop.Core.Domain.Customers.Customer", "Customer")
                        .WithMany("CustomerAddressMappings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Customers.CustomerAttributeValue", b =>
                {
                    b.HasOne("Nop.Core.Domain.Customers.CustomerAttribute", "CustomerAttribute")
                        .WithMany("CustomerAttributeValues")
                        .HasForeignKey("CustomerAttributeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Customers.CustomerCustomerRoleMapping", b =>
                {
                    b.HasOne("Nop.Core.Domain.Customers.Customer", "Customer")
                        .WithMany("CustomerCustomerRoleMappings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nop.Core.Domain.Customers.CustomerRole", "CustomerRole")
                        .WithMany()
                        .HasForeignKey("CustomerRoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Customers.CustomerPassword", b =>
                {
                    b.HasOne("Nop.Core.Domain.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Customers.ExternalAuthenticationRecord", b =>
                {
                    b.HasOne("Nop.Core.Domain.Customers.Customer", "Customer")
                        .WithMany("ExternalAuthenticationRecords")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Customers.RewardPointsHistory", b =>
                {
                    b.HasOne("Nop.Core.Domain.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Directory.StateProvince", b =>
                {
                    b.HasOne("Nop.Core.Domain.Directory.Country", "Country")
                        .WithMany("StateProvinces")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Discounts.DiscountCategoryMapping", b =>
                {
                    b.HasOne("Nop.Core.Domain.Catalog.Category", "Category")
                        .WithMany("DiscountCategoryMappings")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nop.Core.Domain.Discounts.Discount", "Discount")
                        .WithMany("DiscountCategoryMappings")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Discounts.DiscountManufacturerMapping", b =>
                {
                    b.HasOne("Nop.Core.Domain.Discounts.Discount", "Discount")
                        .WithMany("DiscountManufacturerMappings")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nop.Core.Domain.Catalog.Manufacturer", "Manufacturer")
                        .WithMany("DiscountManufacturerMappings")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Discounts.DiscountProductMapping", b =>
                {
                    b.HasOne("Nop.Core.Domain.Discounts.Discount", "Discount")
                        .WithMany("DiscountProductMappings")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nop.Core.Domain.Catalog.Product", "Product")
                        .WithMany("DiscountProductMappings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Discounts.DiscountRequirement", b =>
                {
                    b.HasOne("Nop.Core.Domain.Discounts.Discount", "Discount")
                        .WithMany("DiscountRequirements")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nop.Core.Domain.Discounts.DiscountRequirement")
                        .WithMany("ChildRequirements")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Nop.Core.Domain.Discounts.DiscountUsageHistory", b =>
                {
                    b.HasOne("Nop.Core.Domain.Discounts.Discount", "Discount")
                        .WithMany()
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nop.Core.Domain.Orders.Order", "Order")
                        .WithMany("DiscountUsageHistory")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Forums.Forum", b =>
                {
                    b.HasOne("Nop.Core.Domain.Forums.ForumGroup", "ForumGroup")
                        .WithMany("Forums")
                        .HasForeignKey("ForumGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Forums.ForumPost", b =>
                {
                    b.HasOne("Nop.Core.Domain.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Nop.Core.Domain.Forums.ForumTopic", "ForumTopic")
                        .WithMany()
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Forums.ForumPostVote", b =>
                {
                    b.HasOne("Nop.Core.Domain.Forums.ForumPost", "ForumPost")
                        .WithMany()
                        .HasForeignKey("ForumPostId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Forums.ForumSubscription", b =>
                {
                    b.HasOne("Nop.Core.Domain.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Nop.Core.Domain.Forums.ForumTopic", b =>
                {
                    b.HasOne("Nop.Core.Domain.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Nop.Core.Domain.Forums.Forum", "Forum")
                        .WithMany()
                        .HasForeignKey("ForumId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Forums.PrivateMessage", b =>
                {
                    b.HasOne("Nop.Core.Domain.Customers.Customer", "FromCustomer")
                        .WithMany()
                        .HasForeignKey("FromCustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Nop.Core.Domain.Customers.Customer", "ToCustomer")
                        .WithMany()
                        .HasForeignKey("ToCustomerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Nop.Core.Domain.Localization.LocaleStringResource", b =>
                {
                    b.HasOne("Nop.Core.Domain.Localization.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Localization.LocalizedProperty", b =>
                {
                    b.HasOne("Nop.Core.Domain.Localization.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Logging.ActivityLog", b =>
                {
                    b.HasOne("Nop.Core.Domain.Logging.ActivityLogType", "ActivityLogType")
                        .WithMany()
                        .HasForeignKey("ActivityLogTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nop.Core.Domain.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Logging.Log", b =>
                {
                    b.HasOne("Nop.Core.Domain.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Media.PictureBinary", b =>
                {
                    b.HasOne("Nop.Core.Domain.Media.Picture", "Picture")
                        .WithOne("PictureBinary")
                        .HasForeignKey("Nop.Core.Domain.Media.PictureBinary", "PictureId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Messages.QueuedEmail", b =>
                {
                    b.HasOne("Nop.Core.Domain.Messages.EmailAccount", "EmailAccount")
                        .WithMany()
                        .HasForeignKey("EmailAccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.News.NewsComment", b =>
                {
                    b.HasOne("Nop.Core.Domain.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nop.Core.Domain.News.NewsItem", "NewsItem")
                        .WithMany("NewsComments")
                        .HasForeignKey("NewsItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nop.Core.Domain.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.News.NewsItem", b =>
                {
                    b.HasOne("Nop.Core.Domain.Localization.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Orders.CheckoutAttributeValue", b =>
                {
                    b.HasOne("Nop.Core.Domain.Orders.CheckoutAttribute", "CheckoutAttribute")
                        .WithMany("CheckoutAttributeValues")
                        .HasForeignKey("CheckoutAttributeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Orders.GiftCard", b =>
                {
                    b.HasOne("Nop.Core.Domain.Orders.OrderItem", "PurchasedWithOrderItem")
                        .WithMany("AssociatedGiftCards")
                        .HasForeignKey("PurchasedWithOrderItemId");
                });

            modelBuilder.Entity("Nop.Core.Domain.Orders.GiftCardUsageHistory", b =>
                {
                    b.HasOne("Nop.Core.Domain.Orders.GiftCard", "GiftCard")
                        .WithMany("GiftCardUsageHistory")
                        .HasForeignKey("GiftCardId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nop.Core.Domain.Orders.Order", "UsedWithOrder")
                        .WithMany("GiftCardUsageHistory")
                        .HasForeignKey("UsedWithOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Orders.Order", b =>
                {
                    b.HasOne("Nop.Core.Domain.Common.Address", "BillingAddress")
                        .WithMany()
                        .HasForeignKey("BillingAddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Nop.Core.Domain.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nop.Core.Domain.Common.Address", "PickupAddress")
                        .WithMany()
                        .HasForeignKey("PickupAddressId");

                    b.HasOne("Nop.Core.Domain.Customers.RewardPointsHistory", "RedeemedRewardPointsEntry")
                        .WithOne("UsedWithOrder")
                        .HasForeignKey("Nop.Core.Domain.Orders.Order", "RewardPointsHistoryEntryId");

                    b.HasOne("Nop.Core.Domain.Common.Address", "ShippingAddress")
                        .WithMany()
                        .HasForeignKey("ShippingAddressId");
                });

            modelBuilder.Entity("Nop.Core.Domain.Orders.OrderItem", b =>
                {
                    b.HasOne("Nop.Core.Domain.Orders.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nop.Core.Domain.Catalog.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Orders.OrderNote", b =>
                {
                    b.HasOne("Nop.Core.Domain.Orders.Order", "Order")
                        .WithMany("OrderNotes")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Orders.RecurringPayment", b =>
                {
                    b.HasOne("Nop.Core.Domain.Orders.Order", "InitialOrder")
                        .WithMany()
                        .HasForeignKey("InitialOrderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Nop.Core.Domain.Orders.RecurringPaymentHistory", b =>
                {
                    b.HasOne("Nop.Core.Domain.Orders.RecurringPayment", "RecurringPayment")
                        .WithMany("RecurringPaymentHistory")
                        .HasForeignKey("RecurringPaymentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Orders.ReturnRequest", b =>
                {
                    b.HasOne("Nop.Core.Domain.Customers.Customer", "Customer")
                        .WithMany("ReturnRequests")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Orders.ShoppingCartItem", b =>
                {
                    b.HasOne("Nop.Core.Domain.Customers.Customer", "Customer")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nop.Core.Domain.Catalog.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Polls.Poll", b =>
                {
                    b.HasOne("Nop.Core.Domain.Localization.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Polls.PollAnswer", b =>
                {
                    b.HasOne("Nop.Core.Domain.Polls.Poll", "Poll")
                        .WithMany("PollAnswers")
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Polls.PollVotingRecord", b =>
                {
                    b.HasOne("Nop.Core.Domain.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nop.Core.Domain.Polls.PollAnswer", "PollAnswer")
                        .WithMany("PollVotingRecords")
                        .HasForeignKey("PollAnswerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Security.AclRecord", b =>
                {
                    b.HasOne("Nop.Core.Domain.Customers.CustomerRole", "CustomerRole")
                        .WithMany()
                        .HasForeignKey("CustomerRoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Security.PermissionRecordCustomerRoleMapping", b =>
                {
                    b.HasOne("Nop.Core.Domain.Customers.CustomerRole", "CustomerRole")
                        .WithMany("PermissionRecordCustomerRoleMappings")
                        .HasForeignKey("CustomerRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nop.Core.Domain.Security.PermissionRecord", "PermissionRecord")
                        .WithMany("PermissionRecordCustomerRoleMappings")
                        .HasForeignKey("PermissionRecordId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Shipping.Shipment", b =>
                {
                    b.HasOne("Nop.Core.Domain.Orders.Order", "Order")
                        .WithMany("Shipments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Shipping.ShipmentItem", b =>
                {
                    b.HasOne("Nop.Core.Domain.Shipping.Shipment", "Shipment")
                        .WithMany("ShipmentItems")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Shipping.ShippingMethodCountryMapping", b =>
                {
                    b.HasOne("Nop.Core.Domain.Directory.Country", "Country")
                        .WithMany("ShippingMethodCountryMappings")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nop.Core.Domain.Shipping.ShippingMethod", "ShippingMethod")
                        .WithMany("ShippingMethodCountryMappings")
                        .HasForeignKey("ShippingMethodId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Stores.StoreMapping", b =>
                {
                    b.HasOne("Nop.Core.Domain.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Vendors.VendorAttributeValue", b =>
                {
                    b.HasOne("Nop.Core.Domain.Vendors.VendorAttribute", "VendorAttribute")
                        .WithMany("VendorAttributeValues")
                        .HasForeignKey("VendorAttributeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Vendors.VendorNote", b =>
                {
                    b.HasOne("Nop.Core.Domain.Vendors.Vendor", "Vendor")
                        .WithMany("VendorNotes")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
